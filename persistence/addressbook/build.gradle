/*
 * Copyright 2016-2017 Andres Almiray
 *
 * This file is part of Griffon Examples
 *
 * Griffon Examples is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Griffon Examples is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Griffon Examples. If not, see <http://www.gnu.org/licenses/>.
 */

import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath "org.codehaus.griffon:gradle-griffon-plugin:$griffonVersion"
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath 'net.nemerosa:versioning:2.6.0'
    }
}

apply plugin: 'base'
apply plugin: 'jacoco'

jacoco {
    toolVersion = jacocoVersion
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        jcenter()
        mavenLocal()
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'pr'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

idea {
    project {
        jdkName "1.8"
        languageLevel "1.8"
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def compilerConfiguration = node.component.find { it.'@name' == 'CompilerConfiguration' }
                compilerConfiguration.remove(compilerConfiguration.annotationProcessing)
                compilerConfiguration.append(new XmlParser().parseText("""
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true">
        <processorPath useClasspath="true" />
      </profile>
    </annotationProcessing>"""))
            }
        }
    }
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    macosx = System.getProperty('os.name').contains('Mac OS')
    projectsWithCoverage = []
}

subprojects { subprj ->
    subprj.apply plugin: 'idea'
    subprj.apply plugin: 'java'
    subprj.apply plugin: 'org.codehaus.griffon.griffon'
    subprj.apply plugin: 'net.nemerosa.versioning'
    subprj.apply plugin: 'org.kordamp.gradle.stats'

    griffon {
        disableDependencyResolution = false
        includeDefaultRepositories  = true
        includeGroovyDependencies   = false
        generateProjectStructure    = false
        version                     = griffonVersion
        toolkit                     = 'javafx'
        applicationProperties       = [
            'build.date'    : buildDate,
            'build.time'    : buildTime,
            'build.revision': versioning.info.commit
        ]
    }

    subprj.apply from: rootProject.file('gradle/code-quality.gradle')

    dependencies {
        runtime "org.slf4j:slf4j-simple:$slf4jVersion"
        testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
        testCompile "org.codehaus.griffon:griffon-javafx-test:${griffonVersion}"
        // testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
        // testCompile "org.spockframework:spock-core:${spockVersion}"
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = project.sourceCompatibility
        targetCompatibility = project.targetCompatibility
    }

    tasks.withType(GroovyCompile) {
        sourceCompatibility = project.sourceCompatibility
        targetCompatibility = project.targetCompatibility
    }
}

evaluationDependsOnChildren()

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    group = 'Reporting'
    description = 'Aggregate Jacoco coverage reports.'
    dependsOn = projectsWithCoverage.test
    additionalSourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs + project(':addressbook-common').sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs + project(':addressbook-common').sourceSets.main.allSource.srcDirs)
    classDirectories =  files(projectsWithCoverage.sourceSets.main.output + project(':addressbook-common').sourceSets.main.output.classesDir.path)
    executionData = files(projectsWithCoverage.jacocoTestReport.executionData)
    reports {
        xml.enabled true
        html.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.destination "${buildDir}/reports/jacoco/html"
    }
}
