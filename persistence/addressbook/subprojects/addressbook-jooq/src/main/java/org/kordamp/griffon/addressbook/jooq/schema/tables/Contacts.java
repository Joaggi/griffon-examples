/*
 * Copyright 2016-2017-2017 Andres Almiray
 *
 * This file is part of Griffon Examples
 *
 * Griffon Examples is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Griffon Examples is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Griffon Examples. If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * This class is generated by jOOQ
 */
package org.kordamp.griffon.addressbook.jooq.schema.tables;


import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.kordamp.griffon.addressbook.jooq.schema.Keys;
import org.kordamp.griffon.addressbook.jooq.schema.Public;
import org.kordamp.griffon.addressbook.jooq.schema.tables.records.ContactsRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Contacts extends TableImpl<ContactsRecord> {

    private static final long serialVersionUID = 1549421548;

    /**
     * The reference instance of <code>PUBLIC.CONTACTS</code>
     */
    public static final Contacts CONTACTS = new Contacts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactsRecord> getRecordType() {
        return ContactsRecord.class;
    }

    /**
     * The column <code>PUBLIC.CONTACTS.ID</code>.
     */
    public final TableField<ContactsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_A678873C_A88E_4C9C_BF04_50D54A5BAFA1)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.CONTACTS.NAME</code>.
     */
    public final TableField<ContactsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACTS.LASTNAME</code>.
     */
    public final TableField<ContactsRecord, String> LASTNAME = createField("LASTNAME", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACTS.COMPANY</code>.
     */
    public final TableField<ContactsRecord, String> COMPANY = createField("COMPANY", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACTS.ADDRESS</code>.
     */
    public final TableField<ContactsRecord, String> ADDRESS = createField("ADDRESS", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACTS.EMAIL</code>.
     */
    public final TableField<ContactsRecord, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.CONTACTS</code> table reference
     */
    public Contacts() {
        this("CONTACTS", null);
    }

    /**
     * Create an aliased <code>PUBLIC.CONTACTS</code> table reference
     */
    public Contacts(String alias) {
        this(alias, CONTACTS);
    }

    private Contacts(String alias, Table<ContactsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contacts(String alias, Table<ContactsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ContactsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONTACTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContactsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContactsRecord>> getKeys() {
        return Arrays.<UniqueKey<ContactsRecord>>asList(Keys.CONSTRAINT_C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contacts as(String alias) {
        return new Contacts(alias, this);
    }

    /**
     * Rename this table
     */
    public Contacts rename(String name) {
        return new Contacts(name, null);
    }
}
