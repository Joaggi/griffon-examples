/*
 * Copyright 2016-2018 Andres Almiray
 *
 * This file is part of Griffon Examples
 *
 * Griffon Examples is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Griffon Examples is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Griffon Examples. If not, see <http://www.gnu.org/licenses/>.
 */

configurations {
    functionalTestCompile {
        extendsFrom compile
    }
    functionalTestRuntime {
        extendsFrom runtime
    }
}

dependencies {
    functionalTestCompile 'junit:junit:4.12'
    functionalTestCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    functionalTestCompile "org.spockframework:spock-core:${spockVersion}"
}

sourceSets {
    functionalTest {
        if (file('src/functional-test/java').exists()) {
            java.srcDirs file('src/functional-test/java')
        }
        if (file('src/functional-test/groovy').exists()) {
            groovy.srcDirs file('src/functional-test/groovy')
        }
        resources.srcDir file('src/functional-test/resources')
        compileClasspath += sourceSets.main.output
        compileClasspath += configurations.compileOnly
        compileClasspath += configurations.testCompileOnly
        runtimeClasspath += compileClasspath
    }
}

idea {
    module {
        scopes.TEST.plus += [configurations.functionalTestCompile]
        scopes.TEST.plus += [configurations.functionalTestRuntime]
        testSourceDirs += sourceSets.functionalTest.allSource.srcDirs
    }
}

task functionalTest(type: Test, dependsOn: jar) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.enabled = false
}

task functionalTestReport(type: TestReport) {
    destinationDir = file("${buildDir}/reports/functional-tests")
    reportOn functionalTest.binResultsDir
}

functionalTest.mustRunAfter integrationTest
functionalTest.finalizedBy functionalTestReport
functionalTestReport.dependsOn functionalTest
check.dependsOn functionalTestReport

task jacocoFunctionalTestReport(dependsOn: functionalTest, type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running functional tests.'
    executionData file("${buildDir}/jacoco/functionalTest.exec")
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
        csv.enabled = false
        xml.enabled = true
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco/functional-test/html")
        xml.destination = file("${buildDir}/reports/jacoco/functional-test/jacocoFunctionalTestReport.xml")
    }
}