/*
 * Copyright 2016-2017 Andres Almiray
 *
 * This file is part of Griffon Examples
 *
 * Griffon Examples is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Griffon Examples is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Griffon Examples. If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'org.codehaus.griffon:gradle-griffon-plugin:2.8.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.gradle.api.plugins:gradle-izpack-plugin:0.2.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.github.cr0:gradle-macappbundle-plugin:3.1.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:0.2.1'
        classpath 'net.nemerosa:versioning:2.4.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'org.codehaus.griffon.griffon'
apply plugin: 'net.nemerosa.versioning'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    macosx = System.getProperty('os.name').contains('Mac OS')
}

griffon {
    disableDependencyResolution = false
    includeGroovyDependencies = false
    version = '2.8.0'
    toolkit = 'javafx'
    applicationProperties = [
        'build.date'    : buildDate,
        'build.time'    : buildTime,
        'build.revision': versioning.info.commit
    ]
}

mainClassName = 'org.kordamp.griffon.addressbook.Launcher'

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/javafx-plugin.gradle'
apply from: 'gradle/integration-test.gradle'
apply from: 'gradle/functional-test.gradle'
apply from: 'gradle/package.gradle'
apply from: 'gradle/docs.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'

javafx {
    mainClass = mainClassName
}

repositories {
    // maven { url 'http://repo.spring.io/libs-snapshot-local' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "org.codehaus.griffon:griffon-guice:${griffon.version}"

    compileOnly 'org.projectlombok:lombok:1.16.10'
    griffon 'org.codehaus.griffon.plugins:griffon-miglayout-plugin:1.1.1'
    griffon 'org.codehaus.griffon.plugins:griffon-glazedlists-plugin:1.3.1'
    compile 'com.h2database:h2:1.4.192'
    compile 'org.springframework:spring-context:4.3.3.RELEASE'
    compile 'org.springframework:spring-aop:4.3.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.4.0.RELEASE'
    // compile 'org.springframework.guice:spring-guice:1.0.0.BUILD-SNAPSHOT'
    compile 'com.github.spring-projects:spring-guice:1002284360'
    compile 'org.kordamp.ikonli:ikonli-javafx:1.7.0'
    compile 'org.kordamp.ikonli:ikonli-fontawesome-pack:1.7.0'
    compile 'org.kordamp.bootstrapfx:bootstrapfx-core:0.2.0'
    compile 'org.fxmisc.easybind:easybind:1.0.3'

    runtime 'org.slf4j:slf4j-simple:1.7.21'

    testCompile "org.codehaus.griffon:griffon-javafx-test:${griffon.version}"
    testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"

    testCompile 'org.springframework.boot:spring-boot-starter-test:1.4.0.RELEASE'
    testCompile 'org.mockito:mockito-core:2.2.3'
    testCompile 'org.dbunit:dbunit:2.5.3'
    testCompile 'de.ppi.dbunit.datasetbuilder:dbunit-datasetbuilder:1.4'

    functionalTestCompile "org.codehaus.griffon:griffon-javafx-test:${griffon.version}"
}

configurations {
    all*.exclude group: 'ch.qos.logback', module: 'logback-classic'
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
}

task sourceJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

compileGroovy.enabled = false

tasks.withType(JavaCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*
import java.text.SimpleDateFormat

shadowJar {
    transform(ServiceFileTransformer)
    transform(ServiceFileTransformer) {
        path = 'META-INF/griffon'
    }
    transform(ServiceFileTransformer) {
        path = 'META-INF/types'
    }
    transform(PropertiesFileTransformer) {
        paths = [
            'META-INF/editors/java.beans.PropertyEditor'
        ]
    }
}

startScripts {
    doLast {
        if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
        windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    }
}

if (hasProperty('debugRun') && ((project.debugRun as boolean))) {
    run {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}

task jacocoRootMerge(type: org.gradle.testing.jacoco.tasks.JacocoMerge, dependsOn: [test, jacocoTestReport, jacocoIntegrationTestReport, jacocoFunctionalTestReport]) {
    executionData = files(jacocoTestReport.executionData, jacocoIntegrationTestReport.executionData, jacocoFunctionalTestReport.executionData)
    destinationFile = file("${buildDir}/jacoco/root.exec")
}

task jacocoRootReport(dependsOn: jacocoRootMerge, type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running all tests.'
    executionData file("${buildDir}/jacoco/root.exec")
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
        csv.enabled = false
        xml.enabled = true
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco/root/html"
        xml.destination = "${buildDir}/reports/jacoco/root/root.xml"
    }
}